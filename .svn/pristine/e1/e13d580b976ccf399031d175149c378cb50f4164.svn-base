from persistence import entities
class InMemoryPersistenceContext(object):
    __instance = None
    
    class __impl(object):
        def __init__(self):
            self.flights = {}
            self.airplanes = {}
            self.passengers = {}
        
        def update(self, entity):
            update_dict = {entity.id: entity}
            if isinstance(entity, entities.Flight):
                self.flights.update(update_dict)
                return
            if isinstance(entity, entities.AirplaneType):
                self.airplanes.update(update_dict)
                return
            if isinstance(entity, entities.Passenger):
                self.passengers.update(update_dict)
                return
        
        def create_flight(self, name):
            flight = entities.Flight(name)
            self.update(flight)
            return flight
            
        def create_passenger(self, first_name, last_name):
            passenger = entities.Passenger(first_name, last_name)
            self.update(passenger)
            return passenger
            
        def create_airplane_type(self, name):
            airplane_type = entities.AirplaneType(name)
            self.update(airplane_type)
            return airplane_type
        
        
    
    def __init__(self):
        if InMemoryPersistenceContext.__instance is None:
            InMemoryPersistenceContext.__instance = InMemoryPersistenceContext.__impl()
        self.__dict__['_InMemoryPersistenceContext__instance'] = InMemoryPersistenceContext.__instance
        
    def __getattr__(self, attr):
        """ Delegate access to implementation """
        return getattr(self.__instance, attr)

    def __setattr__(self, attr, value):
        """ Delegate access to implementation """
        return setattr(self.__instance, attr, value)